package encode

import (
	"bytes"

	"github.com/4rchr4y/bpm/constant"
	"github.com/4rchr4y/bpm/pkg/bundle/bundlefile"
	"github.com/4rchr4y/bpm/pkg/bundle/lockfile"
	"github.com/hashicorp/hcl/v2/gohcl"
	"github.com/hashicorp/hcl/v2/hclsimple"
	"github.com/hashicorp/hcl/v2/hclsyntax"
	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/zclconf/go-cty/cty"
)

type BundleEncoder struct{}

func NewBundleEncoder() *BundleEncoder {
	return &BundleEncoder{}
}

func (e *BundleEncoder) DecodeBundleFile(content []byte) (*bundlefile.File, error) {
	file := new(bundlefile.File)
	if err := hclsimple.Decode("bundle.hcl", content, nil, file); err != nil {
		return nil, err
	}

	return file, nil
}

func (e *BundleEncoder) DecodeLockFile(content []byte) (*lockfile.File, error) {
	file := new(lockfile.File)
	if err := hclsimple.Decode(constant.LockFileName, content, nil, file); err != nil {
		return nil, err
	}

	return file, nil
}

func (e *BundleEncoder) EncodeBundleFile(bundlefile *bundlefile.File) []byte {
	f := hclwrite.NewEmptyFile()
	gohcl.EncodeIntoBody(bundlefile, f.Body())

	return bytes.TrimSpace(f.Bytes())
}

const lockfileComment = "// This file has been auto-generated by `bpm`.\n// It is not meant to be edited manually."

func (e *BundleEncoder) EncodeLockFile(lockfile *lockfile.File) []byte {
	tempFile := hclwrite.NewEmptyFile()
	gohcl.EncodeIntoBody(lockfile, tempFile.Body())
	f := hclwrite.NewEmptyFile()

	f.Body().AppendUnstructuredTokens([]*hclwrite.Token{
		{Type: hclsyntax.TokenComment, Bytes: []byte(lockfileComment)},
		{Type: hclsyntax.TokenNewline, Bytes: []byte("\n")},
		{Type: hclsyntax.TokenOBrace, Bytes: tempFile.Bytes()},
	})

	return bytes.TrimSpace(f.Bytes())
}

func transformStringList(data []string) []cty.Value {
	result := make([]cty.Value, len(data))
	for i := range data {
		result[i] = cty.StringVal(data[i])
	}

	return result
}
